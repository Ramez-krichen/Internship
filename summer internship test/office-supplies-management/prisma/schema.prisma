generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Department {
  id               String          @id @default(cuid())
  code             String          @unique
  name             String
  description      String?
  parentId         String?
  managerId        String?
  budget           Float?
  status           DepartmentStatus @default(ACTIVE)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  parent           Department?     @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children         Department[]    @relation("DepartmentHierarchy")
  manager          User?           @relation("DepartmentManager", fields: [managerId], references: [id])
  users            User[]          @relation("DepartmentUsers")

  @@index([code])
  @@index([parentId])
  @@index([managerId])
  @@index([status])
  @@map("departments")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING
  APPROVED
  ORDERED
  RECEIVED
  CANCELLED
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  name             String?
  password         String
  role             UserRole        @default(EMPLOYEE)
  departmentId     String?
  department       String?         // Keep for backward compatibility during migration
  status           UserStatus      @default(ACTIVE)
  permissions      String          @default("") // Comma-separated explicit permissions like "purchase_orders"
  lastSignIn       DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  approvals        Approval[]
  auditLogs        AuditLog[]
  purchaseOrders   PurchaseOrder[]
  requests         Request[]
  processedReturns Return[]        @relation("ProcessedReturns")
  returns          Return[]
  stockMovements   StockMovement[]

  // Relations
  departmentRef    Department?     @relation("DepartmentUsers", fields: [departmentId], references: [id])
  managedDepartments Department[]  @relation("DepartmentManager")

  @@index([departmentId])
  @@index([role])
  @@index([status])
  @@index([email])
  @@map("users")
}

model Supplier {
  id             String          @id @default(cuid())
  name           String
  email          String?
  phone          String?
  address        String?
  contactPerson  String?
  contactTitle   String?
  website        String?
  taxId          String?
  paymentTerms   String?
  notes          String?
  status         String          @default("ACTIVE")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  items          Item[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  items       Item[]

  @@map("categories")
}

model Item {
  id              String           @id @default(cuid())
  reference       String           @unique
  name            String
  description     String?
  unit            String
  price           Float
  minStock        Int              @default(0)
  currentStock    Int              @default(0)
  categoryId      String
  supplierId      String
  isActive        Boolean          @default(true)
  isEcoFriendly   Boolean          @default(false)
  ecoRating       Int?
  carbonFootprint Float?
  recyclable      Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  demandForecasts DemandForecast[]
  supplier        Supplier         @relation(fields: [supplierId], references: [id])
  category        Category         @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  requestItems    RequestItem[]
  returns         Return[]
  stockMovements  StockMovement[]

  @@index([categoryId])
  @@index([supplierId])
  @@index([currentStock])
  @@index([isActive])
  @@index([name])
  @@index([createdAt])
  @@map("items")
}

model Request {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      RequestStatus @default(PENDING)
  priority    RequestPriority @default(MEDIUM)
  requesterId String
  department  String?
  totalAmount Float         @default(0)
  attachments String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  approvals   Approval[]
  items       RequestItem[]
  requester   User          @relation(fields: [requesterId], references: [id])

  @@index([status])
  @@index([requesterId])
  @@index([createdAt])
  @@index([priority])
  @@index([department])
  @@map("requests")
}

model RequestItem {
  id         String  @id @default(cuid())
  requestId  String
  itemId     String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  item       Item    @relation(fields: [itemId], references: [id])
  request    Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([requestId, itemId])
  @@map("request_items")
}

model Approval {
  id         String   @id @default(cuid())
  requestId  String
  approverId String
  status     ApprovalStatus @default(PENDING)
  comments   String?
  level      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  approver   User     @relation(fields: [approverId], references: [id])
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([requestId, approverId, level])
  @@index([status])
  @@index([approverId])
  @@map("approvals")
}

model StockMovement {
  id        String   @id @default(cuid())
  itemId    String
  type      String
  quantity  Int
  reason    String?
  reference String?
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])

  @@index([itemId])
  @@index([createdAt])
  @@index([type])
  @@map("stock_movements")
}

model PurchaseOrder {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  supplierId   String
  status       PurchaseOrderStatus @default(DRAFT)
  totalAmount  Float       @default(0)
  orderDate    DateTime    @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  notes        String?
  createdById  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        OrderItem[]
  createdBy    User        @relation(fields: [createdById], references: [id])
  supplier     Supplier    @relation(fields: [supplierId], references: [id])

  @@index([status])
  @@index([supplierId])
  @@index([orderDate])
  @@index([createdAt])
  @@index([createdById])
  @@map("purchase_orders")
}

model OrderItem {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  itemId           String
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  receivedQuantity Int           @default(0)
  item             Item          @relation(fields: [itemId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@unique([purchaseOrderId, itemId])
  @@map("order_items")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entity      String
  entityId    String
  performedBy String
  timestamp   DateTime @default(now())
  details     String?
  user        User     @relation(fields: [performedBy], references: [id])

  @@map("audit_logs")
}

model Return {
  id            String    @id @default(cuid())
  returnNumber  String    @unique
  itemId        String
  quantity      Int
  reason        String
  condition     String
  description   String?
  requesterId   String
  status        String    @default("PENDING")
  returnDate    DateTime  @default(now())
  processedDate DateTime?
  processedBy   String?
  refundAmount  Float?    @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  processor     User?     @relation("ProcessedReturns", fields: [processedBy], references: [id])
  requester     User      @relation(fields: [requesterId], references: [id])
  item          Item      @relation(fields: [itemId], references: [id])

  @@map("returns")
}

model DemandForecast {
  id              String   @id @default(cuid())
  itemId          String
  period          String
  periodType      String
  predictedDemand Int
  actualDemand    Int?     @default(0)
  confidence      Float
  algorithm       String
  factors         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  item            Item     @relation(fields: [itemId], references: [id])

  @@unique([itemId, period, periodType])
  @@map("demand_forecasts")
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // 'MANAGER_ASSIGNMENT', 'SYSTEM_ALERT', etc.
  title       String
  message     String
  data        String?  // JSON data for additional context
  status      String   @default("UNREAD") // 'UNREAD', 'READ', 'DISMISSED'
  priority    String   @default("MEDIUM") // 'LOW', 'MEDIUM', 'HIGH', 'URGENT'
  targetRole  String?  // 'ADMIN', 'MANAGER', etc. - who should see this
  targetUserId String? // specific user if needed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  readAt      DateTime?
  dismissedAt DateTime?

  @@index([status])
  @@index([targetRole])
  @@index([targetUserId])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}
